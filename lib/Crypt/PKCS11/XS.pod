=encoding utf8

=head1 NAME

Crypt::PKCS11::XS - XS layer for PKCS #11 functions

=head1 SYNPOSIS

  use Crypt::PKCS11;
  my $pkcs11xs = Crypt::PKCS11::XS->new;
  $pkcs11xs->C_...

=head1 DESCRIPTION

XS layer containing wrappers for all PKCS #11 functions that converts Perl data
structures to/from PKCS #11 specific data structures.

=head1 RETURN VALUES AND ERROR HANDLING

This is the general return value and error handling for all methods unless
otherwise stated.

All functions will return a CKR value and the Perl XS intergration will croak if
any argument are not the correct type.

=head1 METHODS

All methods that starts with C_ are in direct relation with the PKCS #11 v2.30
functions described in detail at http://www.cryptsoft.com/pkcs11doc/v230/ .

For documentation about what each of those method does please see the
documentation for PKCS #11 v2.30, the only thing documented here is the
structure of the input and output arguments which uses Perl arrays and hashes
(conversion to/from PKCS #11 specific data structures are handled by the methods).

=over 4

=item $pkcs11xs = Crypt::PKCS11::XS->new

Create a new `Crypt::PKCS11::XS` object.

=item $str = Crypt::PKCS11::XS::rv2str ($rv)

Return the textual name of a CKR return value.

=over 4

=item $rv

A CKR value.

=back

=item $rv = Crypt::PKCS11::XS::setCreateMutex ($pCreateMutex)

Set the create mutex callback, please see `MUTEX CALLBACKS`.

=over 4

=item $pCreateMutex

A CODE reference for the create mutex callback.

=back

=item Crypt::PKCS11::XS::clearCreateMutex

Clear the stored create mutex callback reference.

=item $rv = Crypt::PKCS11::XS::setDestroyMutex ($pDestroyMutex)

Set the destroy mutex callback, please see `MUTEX CALLBACKS`.

=over 4

=item $pDestroyMutex

A CODE reference for the destroy mutex callback.

=back

=item Crypt::PKCS11::XS::clearDestroyMutex

Clear the stored destroy mutex callback reference.

=item $rv = Crypt::PKCS11::XS::setLockMutex ($pLockMutex)

Set the lock mutex callback, please see `MUTEX CALLBACKS`.

=over 4

=item $pLockMutex

A CODE reference for the lock mutex callback.

=back

=item Crypt::PKCS11::XS::clearLockMutex

Clear the stored lock mutex callback reference.

=item $rv = Crypt::PKCS11::XS::setUnlockMutex ($pUnlockMutex)

Set the unlock mutex callback, please see `MUTEX CALLBACKS`.

=over 4

=item $pUnlockMutex

A CODE reference for the unlock mutex callback.

=back

=item Crypt::PKCS11::XS::clearUnlockMutex

Clear the stored unlock mutex callback reference.

=item $rv = $pkcs11xs->load ($path)

Load a PKCS #11 library.

=over 4

=item $path

The path to a PKCS #11 dynamic loadable library.

=back

=item $rv = $pkcs11xs->unload

Unload the PKCS #11 library.

=item $rv = $pkcs11xs->C_Initialize ($pInitArgs)

=over 4

=item $pInitArgs

A HASH reference with the fields listed below.

NOTE: For all Mutex CODE references the global callback will be set, there is no
support for individual callbacks per Crypt::PKCS11::XS object.

All of the Mutex arguments needs to be set if any should be used.

=over 4

=item CreateMutex

A CODE reference to a function to use for creating mutex objects. The global
callback for CreateMutex will also be set.

=item DestroyMutex

A CODE reference to a function to use for destroying mutex objects. The global
callback for DestroyMutex will also be set.

=item LockMutex

A CODE reference to a function to use for locking mutex objects. The global
callback for LockMutex will also be set.

=item UnlockMutex

A CODE reference to a function to use for unlocking mutex objects. The global
callback for UnlockMutex will also be set.

=item flags

A SCALAR.

=back

=back

=item $rv = $pkcs11xs->C_Finalize

=item $rv = $pkcs11xs->C_GetInfo ($pInfo)

=over 4

=item $pInfo

A HASH reference that will get the following fields set:

=item cryptokiVersion

A HASH reference with the following fields:

=over 4

=item major

A SCALAR.

=item minor

A SCALAR.

=back

=item manufacturerID

A SCALAR.

=item flags

A SCALAR.

=item libraryDescription

A SCALAR.

=item libraryVersion

A HASH reference with the following fields:

=over 4

=item major

A SCALAR.

=item minor

A SCALAR.

=back

=back

=item $rv = $pkcs11xs->C_GetSlotList ($tokenPresent, $pSlotList)

=over 4

=item $tokenPresent

A SCALAR.

=item $pSlotList

A ARRAY reference with the list of slotIDs as SCALARs.

=back

=item $rv = $pkcs11xs->C_GetSlotInfo ($slotID, $pInfo)

=over 4

=item $slotID

A SCALAR.

=item $pInfo

A HASH reference with the following fields:

=over 4

=item slotDescription

A SCALAR.

=item manufacturerID

A SCALAR.

=item flags

A SCALAR.

=item hardwareVersion

A HASH reference with the following fields:

=over 4

=item major

A SCALAR.

=item minor

A SCALAR.

=back

=item firmwareVersion

A HASH reference with the following fields:

=over 4

=item major

A SCALAR.

=item minor

A SCALAR.

=back

=back

=back

=item $rv = $pkcs11xs->C_GetTokenInfo ($slotID, $pInfo)

=over 4

=item $slotID

A SCALAR.

=item $pInfo

A HASH reference with the following fields:

=over 4

=item label

A SCALAR.

=item manufacturerID

A SCALAR.

=item model

A SCALAR.

=item serialNumber

A SCALAR.

=item flags

A SCALAR.

=item ulMaxSessionCount

A SCALAR.

=item ulSessionCount

A SCALAR.

=item ulMaxRwSessionCount

A SCALAR.

=item ulRwSessionCount

A SCALAR.

=item ulMaxPinLen

A SCALAR.

=item ulMinPinLen

A SCALAR.

=item ulTotalPublicMemory

A SCALAR.

=item ulFreePublicMemory

A SCALAR.

=item ulTotalPrivateMemory

A SCALAR.

=item ulFreePrivateMemory

A SCALAR.

=item hardwareVersion

A HASH reference with the following fields:

=over 4

=item major

A SCALAR.

=item minor

A SCALAR.

=back

=item firmwareVersion

A HASH reference with the following fields:

=over 4

=item major

A SCALAR.

=item minor

A SCALAR.

=back

=item utcTime

A SCALAR.

=back

=back

=item $rv = $pkcs11xs->C_GetMechanismList ($slotID, $pMechanismList)

=over 4

=item $slotID

=item $pMechanismList

=back

=item $rv = $pkcs11xs->C_GetMechanismInfo ($slotID, $type, $pInfo)

=over 4

=item $slotID

=item $type

=item $pInfo

=back

=item $rv = $pkcs11xs->C_InitToken ($slotID, $pPin, $pLabel)

=over 4

=item $slotID

=item $pPin

=item $pLabel

=back

=item $rv = $pkcs11xs->C_InitPIN ($hSession, $pPin)

=over 4

=item $hSession

=item $pPin

=back

=item $rv = $pkcs11xs->C_SetPIN ($hSession, $pOldPin, $pNewPin)

=over 4

=item $hSession

=item $pOldPin

=item $pNewPin

=back

=item $rv = $pkcs11xs->C_OpenSession ($slotID, $flags, $Notify, $phSession)

=over 4

=item $slotID

=item $flags

=item $Notify

=item $phSession

=back

=item $rv = $pkcs11xs->C_CloseSession ($hSession)

=over 4

=item $hSession

=back

=item $rv = $pkcs11xs->C_CloseAllSessions ($slotID)

=over 4

=item $slotID

=back

=item $rv = $pkcs11xs->C_GetSessionInfo ($hSession, $pInfo)

=over 4

=item $hSession

=item $pInfo

=back

=item $rv = $pkcs11xs->C_GetOperationState ($hSession, $pOperationState)

=over 4

=item $hSession

=item $pOperationState

=back

=item $rv = $pkcs11xs->C_SetOperationState ($hSession, $pOperationState, $hEncryptionKey, $hAuthenticationKey)

=over 4

=item $hSession

=item $pOperationState

=item $hEncryptionKey

=item $hAuthenticationKey

=back

=item $rv = $pkcs11xs->C_Login ($hSession, $userType, $pPin)

=over 4

=item $hSession

=item $userType

=item $pPin

=back

=item $rv = $pkcs11xs->C_Logout ($hSession)

=over 4

=item $hSession

=back

=item $rv = $pkcs11xs->C_CreateObject ($hSession, $pTemplate, $phObject)

=over 4

=item $hSession

=item $pTemplate

=item $phObject

=back

=item $rv = $pkcs11xs->C_CopyObject ($hSession, $hObject, $pTemplate, $phNewObject)

=over 4

=item $hSession

=item $hObject

=item $pTemplate

=item $phNewObject

=back

=item $rv = $pkcs11xs->C_DestroyObject ($hSession, $hObject)

=over 4

=item $hSession

=item $hObject

=back

=item $rv = $pkcs11xs->C_GetObjectSize ($hSession, $hObject, $pulSize)

=over 4

=item $hSession

=item $hObject

=item $pulSize

=back

=item $rv = $pkcs11xs->C_GetAttributeValue ($hSession, $hObject, $pTemplate)

=over 4

=item $hSession

=item $hObject

=item $pTemplate

=back

=item $rv = $pkcs11xs->C_SetAttributeValue ($hSession, $hObject, $pTemplate)

=over 4

=item $hSession

=item $hObject

=item $pTemplate

=back

=item $rv = $pkcs11xs->C_FindObjectsInit ($hSession, $pTemplate)

=over 4

=item $hSession

=item $pTemplate

=back

=item $rv = $pkcs11xs->C_FindObjects ($hSession, $phObject, $ulMaxObjectCount)

=over 4

=item $hSession

=item $phObject

=item $ulMaxObjectCount

=back

=item $rv = $pkcs11xs->C_FindObjectsFinal ($hSession)

=over 4

=item $hSession

=back

=item $rv = $pkcs11xs->C_EncryptInit ($hSession, $pMechanism, $hKey)

=over 4

=item $hSession

=item $pMechanism

=item $hKey

=back

=item $rv = $pkcs11xs->C_Encrypt ($hSession, $pData, $pEncryptedData)

=over 4

=item $hSession

=item $pData

=item $pEncryptedData

=back

=item $rv = $pkcs11xs->C_EncryptUpdate ($hSession, $pPart, $pEncryptedPart)

=over 4

=item $hSession

=item $pPart

=item $pEncryptedPart

=back

=item $rv = $pkcs11xs->C_EncryptFinal ($hSession, $pLastEncryptedPart)

=over 4

=item $hSession

=item $pLastEncryptedPart

=back

=item $rv = $pkcs11xs->C_DecryptInit ($hSession, $pMechanism, $hKey)

=over 4

=item $hSession

=item $pMechanism

=item $hKey

=back

=item $rv = $pkcs11xs->C_Decrypt ($hSession, $pEncryptedData, $pData)

=over 4

=item $hSession

=item $pEncryptedData

=item $pData

=back

=item $rv = $pkcs11xs->C_DecryptUpdate ($hSession, $pEncryptedPart, $pPart)

=over 4

=item $hSession

=item $pEncryptedPart

=item $pPart

=back

=item $rv = $pkcs11xs->C_DecryptFinal ($hSession, $pLastPart)

=over 4

=item $hSession

=item $pLastPart

=back

=item $rv = $pkcs11xs->C_DigestInit ($hSession, $pMechanism)

=over 4

=item $hSession

=item $pMechanism

=back

=item $rv = $pkcs11xs->C_Digest ($hSession, $pData, $pDigest)

=over 4

=item $hSession

=item $pData

=item $pDigest

=back

=item $rv = $pkcs11xs->C_DigestUpdate ($hSession, $pPart)

=over 4

=item $hSession

=item $pPart

=back

=item $rv = $pkcs11xs->C_DigestKey ($hSession, $hKey)

=over 4

=item $hSession

=item $hKey

=back

=item $rv = $pkcs11xs->C_DigestFinal ($hSession, $pDigest)

=over 4

=item $hSession

=item $pDigest

=back

=item $rv = $pkcs11xs->C_SignInit ($hSession, $pMechanism, $hKey)

=over 4

=item $hSession

=item $pMechanism

=item $hKey

=back

=item $rv = $pkcs11xs->C_Sign ($hSession, $pData, $pSignature)

=over 4

=item $hSession

=item $pData

=item $pSignature

=back

=item $rv = $pkcs11xs->C_SignUpdate ($hSession, $pPart)

=over 4

=item $hSession

=item $pPart

=back

=item $rv = $pkcs11xs->C_SignFinal ($hSession, $pSignature)

=over 4

=item $hSession

=item $pSignature

=back

=item $rv = $pkcs11xs->C_SignRecoverInit ($hSession, $pMechanism, $hKey)

=over 4

=item $hSession

=item $pMechanism

=item $hKey

=back

=item $rv = $pkcs11xs->C_SignRecover ($hSession, $pData, $pSignature)

=over 4

=item $hSession

=item $pData

=item $pSignature

=back

=item $rv = $pkcs11xs->C_VerifyInit ($hSession, $pMechanism, $hKey)

=over 4

=item $hSession

=item $pMechanism

=item $hKey

=back

=item $rv = $pkcs11xs->C_Verify ($hSession, $pData, $pSignature)

=over 4

=item $hSession

=item $pData

=item $pSignature

=back

=item $rv = $pkcs11xs->C_VerifyUpdate ($hSession, $pPart)

=over 4

=item $hSession

=item $pPart

=back

=item $rv = $pkcs11xs->C_VerifyFinal ($hSession, $pSignature)

=over 4

=item $hSession

=item $pSignature

=back

=item $rv = $pkcs11xs->C_VerifyRecoverInit ($hSession, $pMechanism, $hKey)

=over 4

=item $hSession

=item $pMechanism

=item $hKey

=back

=item $rv = $pkcs11xs->C_VerifyRecover ($hSession, $pSignature, $pData)

=over 4

=item $hSession

=item $pSignature

=item $pData

=back

=item $rv = $pkcs11xs->C_DigestEncryptUpdate ($hSession, $pPart, $pEncryptedPart)

=over 4

=item $hSession

=item $pPart

=item $pEncryptedPart

=back

=item $rv = $pkcs11xs->C_DecryptDigestUpdate ($hSession, $pEncryptedPart, $pPart)

=over 4

=item $hSession

=item $pEncryptedPart

=item $pPart

=back

=item $rv = $pkcs11xs->C_SignEncryptUpdate ($hSession, $pPart, $pEncryptedPart)

=over 4

=item $hSession

=item $pPart

=item $pEncryptedPart

=back

=item $rv = $pkcs11xs->C_DecryptVerifyUpdate ($hSession, $pEncryptedPart, $pPart)

=over 4

=item $hSession

=item $pEncryptedPart

=item $pPart

=back

=item $rv = $pkcs11xs->C_GenerateKey ($hSession, $pMechanism, $pTemplate, $phKey)

=over 4

=item $hSession

=item $pMechanism

=item $pTemplate

=item $phKey

=back

=item $rv = $pkcs11xs->C_GenerateKeyPair ($hSession, $pMechanism, $pPublicKeyTemplate, $pPrivateKeyTemplate, $phPublicKey, $phPrivateKey)

=over 4

=item $hSession

=item $pMechanism

=item $pPublicKeyTemplate

=item $pPrivateKeyTemplate

=item $phPublicKey

=item $phPrivateKey

=back

=item $rv = $pkcs11xs->C_WrapKey ($hSession, $pMechanism, $hWrappingKey, $hKey, $pWrappedKey)

=over 4

=item $hSession

=item $pMechanism

=item $hWrappingKey

=item $hKey

=item $pWrappedKey

=back

=item $rv = $pkcs11xs->C_UnwrapKey ($hSession, $pMechanism, $hUnwrappingKey, $pWrappedKey, $pTemplate, $phKey)

=over 4

=item $hSession

=item $pMechanism

=item $hUnwrappingKey

=item $pWrappedKey

=item $pTemplate

=item $phKey

=back

=item $rv = $pkcs11xs->C_DeriveKey ($hSession, $pMechanism, $hBaseKey, $pTemplate, $phKey)

=over 4

=item $hSession

=item $pMechanism

=item $hBaseKey

=item $pTemplate

=item $phKey

=back

=item $rv = $pkcs11xs->C_SeedRandom ($hSession, $pSeed)

=over 4

=item $hSession

=item $pSeed

=back

=item $rv = $pkcs11xs->C_GenerateRandom ($hSession, $RandomData, $ulRandomLen)

=over 4

=item $hSession

=item $RandomData

=item $ulRandomLen

=back

=item $rv = $pkcs11xs->C_GetFunctionStatus ($hSession)

=over 4

=item $hSession

=back

=item $rv = $pkcs11xs->C_CancelFunction ($hSession)

=over 4

=item $hSession

=back

=item $rv = $pkcs11xs->C_WaitForSlotEvent ($flags, $pSlot)

=over 4

=item $flags

=item $pSlot

=back

=back

=head1 PRIVATE METHODS

These are the private methods used within the module and should not be used
elsewhere.

=over 4

=item Crypt::PKCS11::XS::SvUOK ($sv)

=over 4

=item $sv

=back

=back

=head1 MUTEX CALLBACKS

PKCS #11 supports setting callbacks for handling mutex and in the C library they
can be set per loaded PKCS #11 library but there is no context pointer supplied
to the C callback functions so there is no portable way to related to the
relevant Perl callbacks and therefor all these callbacks are global. Setting
them once will affect all loaded PKCS #11 libraries.

=head1 NOTE

Derived from the RSA Security Inc. PKCS #11 Cryptographic Token Interface (Cryptoki)

=head1 LICENSE

  Copyright (c) 2014 Jerry Lundström <lundstrom.jerry@gmail.com>
  Copyright (c) 2014 .SE (The Internet Infrastructure Foundation)
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=encoding utf8

=head1 NAME

Crypt::PKCS11::Session - PKCS #11 session handler.

=head1 SYNPOSIS

  use Crypt::PKCS11;

  # Create the main PKCS #11 object, load a PKCS #11 provider .so library and initialize the module
  my $pkcs11 = Crypt::PKCS11->new;
  $pkcs11->load(...);
  $pkcs11->Initialize;

  # Create a new session, log in, use the session, log out and close the session
  my $session = $pkcs11->OpenSession(...);
  $session->Login(...);
  ...
  $session->Logout;
  $session->CloseSession;

=head1 DESCRIPTION

This module encapsulates the PKCS #11 session created with `Crypt::PKCS11->OpenSession`
and is used to manage the keys and encrypt/decrypt data using a HSM.

=head1 RETURN VALUES AND ERROR HANDLING

This is the general return value and error handling for all methods unless
otherwise stated.

On XS layer errors, when called from within these methods, all methods returns
false (0/undef) and the XS layer error can be retrieved with `$pkcs11->errno`
for the number and `$pkcs11->errstr` for the message.

For errors from the methods themself, the method will confess (croak) with the
error message.

=head1 METHODS

For more extensive documentation about the methods, data structures and types
please see http://www.cryptsoft.com/pkcs11doc/v230/ .

=over 4

=item $session->InitPIN ([$pin = 1234 || '...'])

Initializes the normal user's PIN.

The argument is optional due to "protected authentication path", please see the
PKCS #11 documentation for more information about that.

=over 4

=item $pin

Optional argument that is the normal user's PIN, if given must contain a number
or a non-empty string.

=back

=item $session->SetPIN ([$oldPin = 1234 || '...', $newPin = 1234 || '...'])

Modifies the PIN of the user that is currently logged in, or the `CKU_USER` PIN
if the session is not logged in.

The arguments are optional due to "protected authentication path", please see
the PKCS #11 documentation for more information about that.

=over 4

=item $oldPin

Optional argument that is the user's old PIN, if given must contain a number or
a non-empty string.

=item $newPin

Optional argument that is the user's new PIN, if given must contain a number or
a non-empty string.

=back

=item $session->CloseSession

Close the session, any use of the object after closing the session will result
in an error.

=item < %hash || $hash_ref > = $session->GetSessionInfo

=item $operationState = $session->GetOperationState

=item $session->SetOperationState ($operationState)

=item $session->Login ($userType, $pin)

=item $session->Logout

=item $object = $session->CreateObject ($template)

=item $newObject = $session->CopyObject ($object, $template)

=item $session->DestroyObject ($object)

=item $size = $session->GetObjectSize ($object)

=item < @array || 1 > = $session->GetAttributeValue ($object, $template)

=item $session->SetAttributeValue ($object, $template)

=item $session->FindObjectsInit ($template)

=item < @array || $array_ref > = $session->FindObjects ($maxObjectCount)

=item $session->FindObjectsFinal ($maxObjectCount)

=item $session->EncryptInit ($mechanism, $key)

=item $encryptedData = $session->Encrypt ($data)

=item $encryptedPart = $session->EncryptUpdate ($part)

=item $lastEncryptedPart = $session->EncryptFinal

=item $session->DecryptInit ($mechanism, $key)

=item $data = $session->Decrypt ($encryptedData)

=item $part = $session->DecryptUpdate ($encryptedPart)

=item $lastPart = $session->DecryptFinal

=item $session->DigestInit ($mechanism)

=item $digest = $session->Digest ($data)

=item $digest = $session->DigestUpdate ($part)

=item $session->DigestKey ($key)

=item $digest = $session->DigestFinal

=item $session->SignInit ($mechanism, $key)

=item $signature = $session->Sign ($data)

=item $session->SignUpdate ($part)

=item $signature = $session->SignFinal

=item $session->SignRecoverInit ($mechanism, $key)

=item $signature = $session->SignRecover ($data)

=item $session->VerifyInit ($mechanism, $key)

=item $session->Verify ($data, $signature)

=item $session->VerifyUpdate ($part)

=item $session->VerifyFinal ($signature)

=item $session->VerifyRecoverInit ($mechanism, $key)

=item $data = $session->VerifyRecover ($signature)

=item $encryptedPart = $session->DigestEncryptUpdate ($part)

=item $part = $session->DecryptDigestUpdate ($encryptedPart)

=item $encryptedPart = $session->SignEncryptUpdate ($part)

=item $part = $session->DecryptVerifyUpdate ($encryptedPart)

=item $key = $session->GenerateKey ($mechanism, $template)

=item ($publicKey, $privateKey) = $session->GenerateKeyPair ($mechanism, $publicKeyTemplate, $privateKeyTemplate)

=item $wrappedKey = $session->WrapKey ($mechanism, $wrappingKey, $key)

=item $key = $session->UnwrapKey ($mechanism, $unwrappingKey, $wrappedKey, $template)

=item $key = $session->DeriveKey ($mechanism, $baseKey, $template)

=item $session->SeedRandom ($seed)

=item $randomData = $session->GenerateRandom ($randomLen)

=item $session->GetFunctionStatus

=item $session->CancelFunction

=item $errno = $session->errno

Return the last error number, can be used after a method returns false.

=item $errstr = $session->errstr

Return the last error message, can be used after a method returns false.

=back

=head1 PRIVATE METHODS

These are the private methods used within the module and should not be used
elsewhere.

=over 4

=item $session = Crypt::PKCS11::Session->new ($pkcs11xs, $session)

=back

=head1 NOTE

Derived from the RSA Security Inc. PKCS #11 Cryptographic Token Interface (Cryptoki)

=head1 LICENSE

  Copyright (c) 2014 Jerry Lundstr√∂m <lundstrom.jerry@gmail.com>
  Copyright (c) 2014 .SE (The Internet Infrastructure Foundation)
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
